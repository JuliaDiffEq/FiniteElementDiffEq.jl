"""
`getL2error(node,elem,uexact,uh,quadùí™=[])`

`getL2error(fem_mesh::FEMmesh,sol,u)`

Estimates the L2 error between `uexact` and `uh` on the mesh (node,elem). It
reads the mesh to estimate the element type and uses this to choose a
quadrature ùí™ unless specified.
"""
function getL2error(node,elem,uexact,uh,quadùí™=[])

Nu = length(uh);    N = size(node,1);   NT = size(elem,1)
# Euler formula: N-NE+NT = c
NE = N + NT - 1;    NP2 = N + NE;   NP3 = N + 2*NE + NT

if Nu > N+NT-5
    elem2dof = dofP2(elem)
    NP2 = max(vec(elem2dof))
    NE = NP2 - N
    NP3 = N+2*NE+NT
end


## Default quadrature ùí™'s for different elements
if isempty(quadùí™)
    if Nu==NT # piecewise constant function P0
            quadùí™ = 2
    elseif Nu==N      # piecewise linear function P1 element
            quadùí™ = 3
    elseif Nu==NE     # piecewise linear function CR element
            quadùí™ = 3
    elseif Nu==N+NT   # piecewise linear function + constant function
            quadùí™ = 3
    elseif Nu==NP2    # piecewise quadratic function
            quadùí™ = 4
    elseif Nu==NE+NT  # weak Galerkin element
            quadùí™ = 3
    elseif Nu==NP3    # P3 element
            quadùí™ = 5
    end
end

## compute L2 error element-wise using quadrature rule with ùí™ quadùí™
err = zeros(NT)
Œª,œâ = quadpts(quadùí™)
if Nu==N # P1 piecewise linear function
        œï = Œª # linear bases
elseif Nu==N+NT # P1+P0
        œï = Œª # linear bases
elseif Nu==NE  # CR nonconforming P1 element
        œï = 1-2*Œª
        elem2edge = elem2dof[:,4:6] - N
elseif Nu==NP2 # P2 piecewise quadratic elements
        œï[:,1] =   Œª[:,1].*(2*Œª[:,1]-1)
        œï[:,2] =   Œª[:,2].*(2*Œª[:,2]-1)
        œï[:,3] =   Œª[:,3].*(2*Œª[:,3]-1)
        œï[:,4] = 4*Œª[:,2].*Œª[:,3]
        œï[:,5] = 4*Œª[:,1].*Œª[:,3]
        œï[:,6] = 4*Œª[:,2].*Œª[:,1]
elseif Nu==NE+NT  # weak Galerkin element
#             uhp = uh(1:NT) # only count the interior part
        œï = 1-2*Œª
        elem2edge = elem2dof[:,4:6] - N + NT
elseif Nu==2*NE+NT+N # P3 piecewise cubic elements
        œï[:,1]  = 0.5*(3*Œª[:,1]-1).*(3*Œª[:,1]-2).*Œª[:,1]
        œï[:,2]  = 0.5*(3*Œª[:,2]-1).*(3*Œª[:,2]-2).*Œª[:,2]
        œï[:,3]  = 0.5*(3*Œª[:,3]-1).*(3*Œª[:,3]-2).*Œª[:,3]
        œï[:,4]  = 9/2*Œª[:,3].*Œª[:,2].*(3*Œª[:,2]-1)
        œï[:,5]  = 9/2*Œª[:,3].*Œª[:,2].*(3*Œª[:,3]-1)
        œï[:,6]  = 9/2*Œª[:,1].*Œª[:,3].*(3*Œª[:,3]-1)
        œï[:,7]  = 9/2*Œª[:,1].*Œª[:,3].*(3*Œª[:,1]-1)
        œï[:,8]  = 9/2*Œª[:,1].*Œª[:,2].*(3*Œª[:,1]-1)
        œï[:,9]  = 9/2*Œª[:,1].*Œª[:,2].*(3*Œª[:,2]-1)
        œï[:,10] = 27* Œª[:,1].*Œª[:,2].*Œª[:,3]
        elem2dof = dofP3(elem) #Not Implemented
end
nQuad = size(Œª,1)
for p = 1:nQuad
    # evaluate uh at quadrature point
    if Nu==NT # P0 piecewise constant function
            uhp = uh
    elseif Nu==N    # P1 piecewise linear function
            uhp = uh[elem[:,1]]*œï[p,1] +
                  uh[elem[:,2]]*œï[p,2] +
                  uh[elem[:,3]]*œï[p,3]
    elseif Nu==N+NT # P1+P0
            uhp = uh[elem[:,1]]*œï[p,1] +
                  uh[elem[:,2]]*œï[p,2] +
                  uh[elem[:,3]]*œï[p,3]
            uhp = uhp + uh[N+1:end]
    elseif Nu==NE  # CR nonconforming P1 element
            uhp = uh[elem2edge[:,1]]*œï[p,1] +
                  uh[elem2edge[:,2]]*œï[p,2] +
                  uh[elem2edge[:,3]]*œï[p,3]
    elseif Nu==NP2 # P2 piecewise quadratic function
            uhp = uh[elem2dof[:,1]].*œï[p,1] +
                  uh[elem2dof[:,2]].*œï[p,2] +
                  uh[elem2dof[:,3]].*œï[p,3] +
                  uh[elem2dof[:,4]].*œï[p,4] +
                  uh[elem2dof[:,5]].*œï[p,5] +
                  uh[elem2dof[:,6]].*œï[p,6]
    elseif Nu==NP3
            uhp = uh[elem2dof[:,1]].*œï[p,1] +
                  uh[elem2dof[:,2]].*œï[p,2] +
                  uh[elem2dof[:,3]].*œï[p,3] +
                  uh[elem2dof[:,4]].*œï[p,4] +
                  uh[elem2dof[:,5]].*œï[p,5] +
                  uh[elem2dof[:,6]].*œï[p,6] +
                  uh[elem2dof[:,7]].*œï[p,7] +
                  uh[elem2dof[:,8]].*œï[p,8] +
                  uh[elem2dof[:,9]].*œï[p,9] +
                  uh[elem2dof[:,10]].*œï[p,10]
    elseif Nu==NE+NT  # weak Galerkin element
            #             uhp = uh(1:NT) # only count the interior part
            uhp = uh[elem2edge[:,1]]*œï[p,1] +
                  uh[elem2edge[:,2]]*œï[p,2] +
                  uh[elem2edge[:,3]]*œï[p,3]
    end
    # quadrature points in the x-y coordinate
    pxy = Œª[p,1]*node[elem[:,1],:] +
        Œª[p,2]*node[elem[:,2],:] +
        Œª[p,3]*node[elem[:,3],:]
    err = err + œâ[p]*(uexact(pxy) - uhp).^2
end
# Modify by area
ve2 = node[elem[:,1],:]-node[elem[:,3],:]
ve3 = node[elem[:,2],:]-node[elem[:,1],:]
area = 0.5*abs.(-ve3[:,1].*ve2[:,2]+ve3[:,2].*ve2[:,1])
err = area.*err
err[isnan.(err)] = 0 # singular values are excluded
err = sqrt(sum(err))
return(err)
end

"""
`quadpts(ùí™)`

Returns the quadrature points and œâ's for and ùí™  in 2D.

Reference:
David Dunavant. High degree efficient symmetrical Gaussian
quadrature rules for the triangle. International journal for numerical
methods in engineering. 21(6):1129--1148, 1985.
"""
function quadpts(ùí™)
  if ùí™>9
      ùí™ = 9
  end
  if ùí™==1
          Œª = [1/3 1/3 1/3]
          œâ = 1
  elseif ùí™==2
          Œª = [2/3 1/6 1/6
                    1/6 2/3 1/6
                    1/6 1/6 2/3]
          œâ = [1/3 1/3 1/3]
  elseif ùí™==3
          Œª = [1/3 1/3 1/3
                    0.6 0.2 0.2
                    0.2 0.6 0.2
                    0.2 0.2 0.6]
          œâ = [-27/48 25/48 25/48 25/48]
  elseif ùí™==4
          Œª = [0.108103018168070 0.445948490915965 0.445948490915965
                    0.445948490915965 0.108103018168070 0.445948490915965
                    0.445948490915965 0.445948490915965 0.108103018168070
                    0.816847572980459 0.091576213509771 0.091576213509771
                    0.091576213509771 0.816847572980459 0.091576213509771
                    0.091576213509771 0.091576213509771 0.816847572980459]
          œâ = [0.223381589678011 0.223381589678011 0.223381589678011 0.109951743655322 0.109951743655322 0.109951743655322]
  elseif ùí™==5
          Œ±‚ÇÅ = 0.059715871789770 ;     Œ≤‚ÇÅ = 0.470142064105115
          Œ±‚ÇÇ = 0.797426985353087 ;     Œ≤‚ÇÇ = 0.101286507323456
          Œª = [   1/3    1/3    1/3
                    Œ±‚ÇÅ  Œ≤‚ÇÅ  Œ≤‚ÇÅ
                     Œ≤‚ÇÅ Œ±‚ÇÅ  Œ≤‚ÇÅ
                     Œ≤‚ÇÅ  Œ≤‚ÇÅ Œ±‚ÇÅ
                    Œ±‚ÇÇ  Œ≤‚ÇÇ  Œ≤‚ÇÇ
                     Œ≤‚ÇÇ Œ±‚ÇÇ  Œ≤‚ÇÇ
                     Œ≤‚ÇÇ  Œ≤‚ÇÇ Œ±‚ÇÇ]
          œâ = [0.225 0.132394152788506 0.132394152788506 0.132394152788506 0.125939180544827 0.125939180544827 0.125939180544827]
  elseif ùí™==6
          A =[0.249286745170910  0.249286745170910  0.116786275726379
              0.249286745170910  0.501426509658179  0.116786275726379
              0.501426509658179  0.249286745170910  0.116786275726379
              0.063089014491502  0.063089014491502  0.050844906370207
              0.063089014491502  0.873821971016996  0.050844906370207
              0.873821971016996  0.063089014491502  0.050844906370207
              0.310352451033784  0.636502499121399  0.082851075618374
              0.636502499121399  0.053145049844817  0.082851075618374
              0.053145049844817  0.310352451033784  0.082851075618374
              0.636502499121399  0.310352451033784  0.082851075618374
              0.310352451033784  0.053145049844817  0.082851075618374
              0.053145049844817  0.636502499121399  0.082851075618374]
          Œª = [A[:,[1;2]] 1-sum(A[:,[1;2]],2)]
          œâ = A[:,3]
  elseif ùí™==7
          A =[0.333333333333333  0.333333333333333 -0.149570044467682
              0.260345966079040  0.260345966079040  0.175615257433208
              0.260345966079040  0.479308067841920  0.175615257433208
              0.479308067841920  0.260345966079040  0.175615257433208
              0.065130102902216  0.065130102902216  0.053347235608838
              0.065130102902216  0.869739794195568  0.053347235608838
              0.869739794195568  0.065130102902216  0.053347235608838
              0.312865496004874  0.638444188569810  0.077113760890257
              0.638444188569810  0.048690315425316  0.077113760890257
              0.048690315425316  0.312865496004874  0.077113760890257
              0.638444188569810  0.312865496004874  0.077113760890257
              0.312865496004874  0.048690315425316  0.077113760890257
              0.048690315425316  0.638444188569810  0.077113760890257]
              Œª = [A[:,[1;2]] 1-sum(A[:,[1;2]],2)]
              œâ = A[:,3]
  elseif ùí™==8
          A =[0.333333333333333  0.333333333333333  0.144315607677787
              0.081414823414554  0.459292588292723  0.095091634267285
              0.459292588292723  0.081414823414554  0.095091634267285
              0.459292588292723  0.459292588292723  0.095091634267285
              0.658861384496480  0.170569307751760  0.103217370534718
              0.170569307751760  0.658861384496480  0.103217370534718
              0.170569307751760  0.170569307751760  0.103217370534718
              0.898905543365938  0.050547228317031  0.032458497623198
              0.050547228317031  0.898905543365938  0.032458497623198
              0.050547228317031  0.050547228317031  0.032458497623198
              0.008394777409958  0.263112829634638  0.027230314174435
              0.008394777409958  0.728492392955404  0.027230314174435
              0.263112829634638  0.008394777409958  0.027230314174435
              0.728492392955404  0.008394777409958  0.027230314174435
              0.263112829634638  0.728492392955404  0.027230314174435
              0.728492392955404  0.263112829634638  0.027230314174435]
              Œª = [A[:,[1;2]] 1-sum(A[:,[1;2]],2)]
              œâ = A[:,3]
  elseif ùí™==9
          A =[0.333333333333333  0.333333333333333  0.097135796282799
              0.020634961602525  0.489682519198738  0.031334700227139
              0.489682519198738  0.020634961602525  0.031334700227139
              0.489682519198738  0.489682519198738  0.031334700227139
              0.125820817014127  0.437089591492937  0.07782754100474
              0.437089591492937  0.125820817014127  0.07782754100474
              0.437089591492937  0.437089591492937  0.07782754100474
              0.623592928761935  0.188203535619033  0.079647738927210
              0.188203535619033  0.623592928761935  0.079647738927210
              0.188203535619033  0.188203535619033  0.079647738927210
              0.910540973211095  0.044729513394453  0.025577675658698
              0.044729513394453  0.910540973211095  0.025577675658698
              0.044729513394453  0.044729513394453  0.025577675658698
              0.036838412054736  0.221962989160766  0.043283539377289
              0.036838412054736  0.741198598784498  0.043283539377289
              0.221962989160766  0.036838412054736  0.043283539377289
              0.741198598784498  0.036838412054736  0.043283539377289
              0.221962989160766  0.741198598784498  0.043283539377289
              0.741198598784498  0.221962989160766  0.043283539377289]
              Œª = [A[:,[1;2]] 1-sum(A[:,[1;2]],2)]
              œâ = A[:,3]
  end
  return(Œª,œâ)
end

"""
`quadpts1(ùí™)`

References:
Pavel Holoborodko: http://www.holoborodko.com/pavel/numerical-methods/numerical-integration/
"""
function quadpts1(ùí™)
  numPts = ceil((ùí™+1)/2)
  if numPts > 10
     numPts = 10
  end
if numPts==1
          A = [0      2.0000000000000000000000000]
elseif numPts==2
          A = [0.5773502691896257645091488 	1.0000000000000000000000000
              -0.5773502691896257645091488 	1.0000000000000000000000000]
elseif numPts==3
          A = [0 	0.8888888888888888888888889
              0.7745966692414833770358531 	0.5555555555555555555555556
              -0.7745966692414833770358531 	0.5555555555555555555555556]
elseif numPts==4
          A = [0.3399810435848562648026658 	0.6521451548625461426269361
              0.8611363115940525752239465 	0.3478548451374538573730639
              -0.3399810435848562648026658 	0.6521451548625461426269361
              -0.8611363115940525752239465 	0.3478548451374538573730639]
elseif numPts==5
          A = [0 	                            0.5688888888888888888888889
              0.5384693101056830910363144 	0.4786286704993664680412915
              0.9061798459386639927976269 	0.2369268850561890875142640
              -0.5384693101056830910363144 	0.4786286704993664680412915
              -0.9061798459386639927976269 	0.2369268850561890875142640]
elseif numPts==6
          A = [0.2386191860831969086305017 	0.4679139345726910473898703
              0.6612093864662645136613996 	0.3607615730481386075698335
              0.9324695142031520278123016 	0.1713244923791703450402961
              -0.2386191860831969086305017 	0.4679139345726910473898703
              -0.6612093864662645136613996 	0.3607615730481386075698335
              -0.9324695142031520278123016 	0.1713244923791703450402961]
elseif numPts==7
          A = [0 	                            0.4179591836734693877551020
              0.4058451513773971669066064 	0.3818300505051189449503698
              0.7415311855993944398638648 	0.2797053914892766679014678
              0.9491079123427585245261897 	0.1294849661688696932706114
              -0.4058451513773971669066064 	0.3818300505051189449503698
              -0.7415311855993944398638648 	0.2797053914892766679014678
              -0.9491079123427585245261897 	0.1294849661688696932706114]
elseif numPts==8
          A = [0.1834346424956498049394761 	0.3626837833783619829651504
              0.5255324099163289858177390 	0.3137066458778872873379622
              0.7966664774136267395915539 	0.2223810344533744705443560
              0.9602898564975362316835609 	0.1012285362903762591525314
              -0.1834346424956498049394761 	0.3626837833783619829651504
              -0.5255324099163289858177390 	0.3137066458778872873379622
              -0.7966664774136267395915539 	0.2223810344533744705443560
              -0.9602898564975362316835609 	0.1012285362903762591525314]
elseif numPts==9
          A = [0 	                            0.3302393550012597631645251
              0.3242534234038089290385380 	0.3123470770400028400686304
              0.6133714327005903973087020 	0.2606106964029354623187429
              0.8360311073266357942994298 	0.1806481606948574040584720
              0.9681602395076260898355762 	0.0812743883615744119718922
              -0.3242534234038089290385380 	0.3123470770400028400686304
              -0.6133714327005903973087020 	0.2606106964029354623187429
              -0.8360311073266357942994298 	0.1806481606948574040584720
              -0.9681602395076260898355762 	0.0812743883615744119718922]
elseif numPts==10
          A = [0.1488743389816312108848260 	0.2955242247147528701738930
              0.4333953941292471907992659 	0.2692667193099963550912269
              0.6794095682990244062343274 	0.2190863625159820439955349
              0.8650633666889845107320967 	0.1494513491505805931457763
              0.9739065285171717200779640 	0.0666713443086881375935688
              -0.1488743389816312108848260 	0.2955242247147528701738930
              -0.4333953941292471907992659 	0.2692667193099963550912269
              -0.6794095682990244062343274 	0.2190863625159820439955349
              -0.8650633666889845107320967 	0.1494513491505805931457763
              -0.9739065285171717200779640 	0.0666713443086881375935688]
  end
  Œª‚ÇÅ = (A[:,1]+1)/2
  Œª‚ÇÇ = 1 - Œª‚ÇÅ
  Œª = [Œª‚ÇÅ Œª‚ÇÇ]
  œâ = A[:,2]/2
  return(Œª,œâ)
end
"""
`function getH1error(node,elem,Du,uh,K=[],quadùí™=[])`

`getH1error(fem_mesh::FEMmesh,Du,u)`

Estimates the H1 error between `uexact` and `uh` on the mesh (node,elem). It
reads the mesh to estimate the element type and uses this to choose a
quadrature ùí™ unless specified. If `K` is specified then it is the
diffusion coefficient matrix.
"""
function getH1error(node,elem,Du,uh,K=[],quadùí™=[])

  Nu = size(uh,1);    N = size(node,1);   NT = size(elem,1);
  # Euler formula N-NE+NT = c # rough estimateus using Euler formula
  NE = N + NT;    NP2 = N + NE;   NP3 = N + 2*NE + NT
  if Nu > N+NT-5   # Euler formula N-NE+NT = c
      elem2dof = dofP2(elem)
      NP2 = max(elem2dof(:))
      NE = NP2 - N
      NP3 = N+2*NE+NT
  end

  ## Default quadrature ùí™s for different elements
  if isempty(quadùí™)
      if Nu==NT     # piecewise constant vector (uh is Duh)
              quadùí™ = 3
      elseif Nu==N      # piecewise linear function ‚Ñô1 element
              quadùí™ = 3
      elseif Nu==NE     # piecewise linear function CR element
              quadùí™ = 3
      elseif Nu==NP2    # piecewise quadratic function
              quadùí™ = 4
      elseif Nu==NE + NT # WG element
              quadùí™ = 3
      elseif Nu==NP3    # ‚Ñô3 element
              quadùí™ = 5
      end
  end
  ## compute ‚àáu of finite element function uh
  #Only ‚Ñô1 Implemented
  if (size(uh,2) == 2) && (Nu == NT)      # uh is a piecewise constant vector
      Duh = uh
      area = abs.(simplexvolume(node,elem))
  elseif size(uh,2) == 1   # scalar function uh
      if Nu==N      # piecewise linear function ‚Ñô1 element
              Duh,area = ‚àáu(node,elem,uh)
      elseif Nu==NE     # piecewise linear function CR element
              elem2edge = elem2dof(:,4:6) - N
              Duh,area = ‚àáuCR(node,elem,elem2edge,uh)
      elseif Nu==NE + NT # weak Galerkin element
              elem2edge = elem2dof(:,4:6) - N
              Duh,area = ‚àáuWG(node,elem,elem2edge,uh)
      elseif Nu==NP2    # piecewise quadratic function
              DŒª,area = ‚àábasis(node,elem)
      elseif Nu==NP3
              DŒª,area = ‚àábasis(node,elem)
              elem2dof = dofP3(elem)
      end
  end

  ## compute H1 error element-wise using quadrature rule with ùí™ quadùí™
  Œª,œâ = quadpts(quadùí™)
  nQuad = size(Œª,1)
  err = zeros(NT)
  for p = 1:nQuad
      pxy = Œª[p,1]*node[elem[:,1],:] +
            Œª[p,2]*node[elem[:,2],:] +
            Œª[p,3]*node[elem[:,3],:]
      if Nu == NP2 # piecewise quadratic function
          Dœïp1 = (4*Œª[p,1]-1).*DŒª[:,:,1]
          Dœïp2 = (4*Œª[p,2]-1).*DŒª[:,:,2]
          Dœïp3 = (4*Œª[p,3]-1).*DŒª[:,:,3]
          Dœïp4 = 4*(Œª[p,2]*DŒª[:,:,3]+Œª[p,3]*DŒª[:,:,2])
          Dœïp5 = 4*(Œª[p,3]*DŒª[:,:,1]+Œª[p,1]*DŒª[:,:,3])
          Dœïp6 = 4*(Œª[p,1]*DŒª[:,:,2]+Œª[p,2]*DŒª[:,:,1])
          Duh = repmat(uh(elem2dof[:,1]),1,2).*Dœïp1 +
                repmat(uh(elem2dof[:,2]),1,2).*Dœïp2 +
                repmat(uh(elem2dof[:,3]),1,2).*Dœïp3 +
                repmat(uh(elem2dof[:,4]),1,2).*Dœïp4 +
                repmat(uh(elem2dof[:,5]),1,2).*Dœïp5 +
                repmat(uh(elem2dof[:,6]),1,2).*Dœïp6
      end
      if Nu == NP3 # piecewise cubic function
          Dœïp1 = (27/2*Œª(p,1)*Œª(p,1)-9*Œª(p,1)+1).*DŒª(:,:,1)
          Dœïp2 = (27/2*Œª(p,2)*Œª(p,2)-9*Œª(p,2)+1).*DŒª(:,:,2)
          Dœïp3 = (27/2*Œª(p,3)*Œª(p,3)-9*Œª(p,3)+1).*DŒª(:,:,3)
          Dœïp4 = 9/2*((3*Œª(p,2)*Œª(p,2)-Œª(p,2)).*DŒª(:,:,3)+
                  Œª(p,3)*(6*Œª(p,2)-1).*DŒª(:,:,2))
          Dœïp5 = 9/2*((3*Œª(p,3)*Œª(p,3)-Œª(p,3)).*DŒª(:,:,2)+
                   Œª(p,2)*(6*Œª(p,3)-1).*DŒª(:,:,3))
          Dœïp6 = 9/2*((3*Œª(p,3)*Œª(p,3)-Œª(p,3)).*DŒª(:,:,1)+
                   Œª(p,1)*(6*Œª(p,3)-1).*DŒª(:,:,3))
          Dœïp7 = 9/2*((3*Œª(p,1)*Œª(p,1)-Œª(p,1)).*DŒª(:,:,3)+
                   Œª(p,3)*(6*Œª(p,1)-1).*DŒª(:,:,1))
          Dœïp8 = 9/2*((3*Œª(p,1)*Œª(p,1)-Œª(p,1)).*DŒª(:,:,2)+
                   Œª(p,2)*(6*Œª(p,1)-1).*DŒª(:,:,1))
          Dœïp9 = 9/2*((3*Œª(p,2)*Œª(p,2)-Œª(p,2)).*DŒª(:,:,1)+
                   Œª(p,1)*(6*Œª(p,2)-1).*DŒª(:,:,2))
          Dœïp10= 27*(Œª(p,1)*Œª(p,2)*DŒª(:,:,3)+Œª(p,1)*Œª(p,3)*DŒª(:,:,2)+
                   Œª(p,3)*Œª(p,2)*DŒª(:,:,1))
          Duh = repmat(uh(elem2dof(:,1)),1,2).*Dœïp1 +
                repmat(uh(elem2dof(:,2)),1,2).*Dœïp2 +
                repmat(uh(elem2dof(:,3)),1,2).*Dœïp3 +
                repmat(uh(elem2dof(:,4)),1,2).*Dœïp4 +
                repmat(uh(elem2dof(:,5)),1,2).*Dœïp5 +
                repmat(uh(elem2dof(:,6)),1,2).*Dœïp6 +
                repmat(uh(elem2dof(:,7)),1,2).*Dœïp7 +
                repmat(uh(elem2dof(:,8)),1,2).*Dœïp8 +
                repmat(uh(elem2dof(:,9)),1,2).*Dœïp9 +
                repmat(uh(elem2dof(:,10)),1,2).*Dœïp10
      end
      if isa(K,Function)
          err = err + œâ[p]*K(pxy).*sum((Du(pxy)-Duh).^2,2)
      else
          err = err + œâ[p]*sum((Du(pxy)-Duh).^2,2)
      end
  end
  if !isempty(K) && isa(K,Vector{Number}) && size(K,1) == NT
      err = K.*err    # K is piecewise constant
  end
  err = area.*err
  err[isnan.(err)] = 0 # singular values are excluded
  err = sqrt(sum(err))
  return(err)
end

"""
`‚àáu(node,elem,u,DŒª=[])`

Estimates ``‚àáu`` on the mesh (node,elem)
"""
function ‚àáu(node,elem,u,DŒª=[])
  if isempty(DŒª)
      DŒª,area = ‚àábasis(node,elem)
  end
  dudx =  u[elem[:,1]].*DŒª[:,1,1] + u[elem[:,2]].*DŒª[:,1,2] +
        u[elem[:,3]].*DŒª[:,1,3]
  dudy =  u[elem[:,1]].*DŒª[:,2,1] + u[elem[:,2]].*DŒª[:,2,2] +
        u[elem[:,3]].*DŒª[:,2,3]
  Du = [dudx dudy];
  return(Du,area,DŒª)
end

"""
`‚àábasis(node,elem)`

Returns ``‚àáu`` of the barycentric basis elements.
"""
function ‚àábasis(node,elem)
  NT = size(elem,1)
  DŒª = Array{Float64}(NT,2,3)

  ve1 = node[elem[:,3],:]-node[elem[:,2],:]
  ve2 = node[elem[:,1],:]-node[elem[:,3],:]
  ve3 = node[elem[:,2],:]-node[elem[:,1],:]
  area = 0.5*(-ve3[:,1].*ve2[:,2] + ve3[:,2].*ve2[:,1])
  DŒª[1:NT,:,3] = [-ve3[:,2]./(2*area) ve3[:,1]./(2*area)]
  DŒª[1:NT,:,1] = [-ve1[:,2]./(2*area) ve1[:,1]./(2*area)]
  DŒª[1:NT,:,2] = [-ve2[:,2]./(2*area) ve2[:,1]./(2*area)]

  # When not positive orientated, reverse the sign.
  idx = (area.<0)
  area[idx,:] = -area[idx,:]
  elemSign = ones(NT)
  elemSign[idx] = -1
  return(DŒª,area,elemSign)
end

function getL2error(fem_mesh::FEMmesh,sol,u)
  if fem_mesh.evolutionEq
    return(getL2error(fem_mesh.node,fem_mesh.elem,x->sol(fem_mesh.T,x),u))
  else
    return(getL2error(fem_mesh.node,fem_mesh.elem,sol,u))
  end
end

function getH1error(fem_mesh::FEMmesh,Du,u)
  if fem_mesh.evolutionEq
    return(getH1error(fem_mesh.node,fem_mesh.elem,x->Du(fem_mesh.T,x),u))
  else
    return(getH1error(fem_mesh.node,fem_mesh.elem,Du,u))
  end
end
